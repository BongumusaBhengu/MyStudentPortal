@page "/Account/Manage/Enrollments"
@using MediatR
@using Microsoft.AspNetCore.Identity
@using MyStudentPortal.Application.Features
@using MyStudentPortal.Application.Features.Courses
@using MyStudentPortal.Application.Features.Enrollments.Queries
@using MyStudentPortal.Application.Features.Enrollments.Queries.Create
@using MyStudentPortal.Application.Features.Enrollments.Queries.Get
@using MyStudentPortal.Domain.Entities


@inject IMediator Mediator;
@inject UserManager<ApplicationUser> UserManager

<div class="row col-md-12">
    <div class="col-md-6">
        <MudPaper Class="py-3" Width="350px">
            <MudItem xs="12">
                <div class="d-flex" style="padding-bottom: 25px;">
                    <MudText>Select Courses:</MudText>
                </div>
            </MudItem>
            <MudList @bind-SelectedValues="selectedCourses" SelectionMode="SelectionMode.MultiSelection" Label="Select Course:" Color="Color.Tertiary">
                @foreach (var item in _courses)
                {
                    <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                }
            </MudList>
            <MudCardActions>
                <MudButton OnClick="() => RegiterAsync()" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">Register Course(s)</MudButton>
            </MudCardActions>
        </MudPaper>
    </div>
    <div class="col-md-6">
        <MudPaper Class="py-3" Width="350px">
            <MudItem xs="12">
                <div class="d-flex" style="padding-bottom: 25px;">
                    <MudText>Registered Courses:</MudText>
                </div>
            </MudItem>
            <MudList @bind-SelectedValues="selectedCourses" SelectionMode="SelectionMode.MultiSelection" Label="Registered Course:" Color="Color.Tertiary">
                @foreach (var item in _registeredCourses)
                {
                    <MudSelectItem Value="@item">@item.Name</MudSelectItem>
                }
            </MudList>
            <MudCardActions>
                <MudButton OnClick="() => DeRegisterAsync()" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">De-register Course(s)</MudButton>
            </MudCardActions>
        </MudPaper>
    </div>
</div>

@code {

    private ApplicationUser _user = default!;

    private List<CourseDto> _courses { get; set; } = new();

    private List<CourseDto> _registeredCourses { get; set; } = new();

    private IReadOnlyCollection<CourseDto> selectedCourses { get; set; }

    [SupplyParameterFromForm]
    private CourseDto Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _user = await UserManager.GetUserAsync(HttpContext.User);

        var coursesInDB = await GetCoursesAsync();

        var registeredCourse = await GetRegisteredCoursesAsync(_user.Id);

        if (coursesInDB is not null)
        {
            _courses = coursesInDB.Except(registeredCourse).ToList();

            if (registeredCourse is not null)
                _registeredCourses = registeredCourse.Except(coursesInDB).ToList();
        }

    }

    private async Task<IList<CourseDto>> GetCoursesAsync()
    {
        return await Mediator.Send(new GetCourseQuery());
    }

    private async Task<IList<CourseDto>> GetRegisteredCoursesAsync(string userId)
    {
        return await Mediator.Send(new GetEnrollmentsQuery(userId));
    }

    private void AddCourse()
    {
        var courseId = 0;
        if (_courses is not null)
        {
            var courseToRemove = _courses.Select(x => x).Where(x => x.Id == courseId).First();

            // _courses.Remove(courseToRemove);
            _registeredCourses.Add(courseToRemove);
        }
    }

    private void RemoveCourse(int courseId)
    {
        if (_registeredCourses is not null)
        {
            var courseToRemove = _courses.Select(x => x).Where(x => x.Id == courseId).First();

            _registeredCourses.Remove(courseToRemove);
            // _courses.Add(courseToRemove);
        }
    }

    private async Task RegiterAsync()
    {
        var newRegistration = new EnrollmentsDto()
            {
                ApplicationUser = _user,
                Courses = selectedCourses.ToList(),
                EnrollmentDate = DateTime.Now

            };

        await Mediator.Send(new CreateEnrollmentsQuery(newRegistration));
    }

    private async Task DeRegisterAsync()
    {
        var newRegistration = new EnrollmentsDto()
            {
                ApplicationUser = _user,
                Courses = selectedCourses.ToList(),
                EnrollmentDate = DateTime.Now

            };

        await Mediator.Send(new CreateEnrollmentsQuery(newRegistration));
    }
}
