@page "/Account/Manage/Enrollments"
@using MediatR
@using Microsoft.AspNetCore.Identity
@using MyStudentPortal.Application.Features
@using MyStudentPortal.Application.Features.Courses
@using MyStudentPortal.Application.Features.Enrollments.Queries
@using MyStudentPortal.Application.Features.Enrollments.Queries.Create
@using MyStudentPortal.Application.Features.Enrollments.Queries.Get
@using MyStudentPortal.Domain.Entities


@inject IMediator Mediator;
@inject UserManager<ApplicationUser> UserManager

<div class="row">
    <div class="col-md-4">
        <h2>Course Registration</h2>
        <EditForm Model="Input" FormName="enrollment" OnValidSubmit="OnValidSubmitAsync" method="post">
            <ValidationSummary class="text-danger" role="alert" />
            <label for="courseList" class="form-label">Courses:</label>
            <div class="form-floating mb-3">
                <select multiple id="courseList" class="form-control" style="height: 400px;">
                    @foreach (var course in Courses)
                    {
                        <option value="@course.Id">@course.Name</option>
                    }
                </select>
            </div>
            <div class="form-floating mb-3">
                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </div>
        </EditForm>
    </div>
    <div class="col-md-4">
        <h2>Registered Course</h2>
        <EditForm>
            <label for="registerdCourseList" class="form-label">Courses:</label>
            <div class="form-floating mb-3">
                <select multiple id="registerdCourseList" class="form-control" style="height: 400px;">
                    @foreach (var course in RegisteredCourses)
                    {
                        <option value="@course.CourseId">@course.CourseName</option>
                    }
                </select>
            </div>
        </EditForm>
    </div>
</div>
@code {

    private ApplicationUser user = default!;

    private IList<CourseDto>? Courses { get; set; }

    private IList<EnrollmentsDto>? RegisteredCourses { get; set; }

    [SupplyParameterFromForm]
    private EnrollmentsDto? Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User);
        Courses = await GetCoursesAsync();
        RegisteredCourses = await Mediator.Send(new GetEnrollmentsQuery(user.Id));
    }

    private async Task<IList<CourseDto>> GetCoursesAsync()
    {
        return await Mediator.Send(new GetCourseQuery());
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input is not null)
            await Mediator.Send(new CreateEnrollmentsQuery(Input));
    }

}