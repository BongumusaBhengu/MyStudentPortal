@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MyStudentPortal.Domain.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ISnackbar Snackbar

<PageTitle>Log in</PageTitle>
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudItem xs="12">
                        <div class="d-flex justify-center">
                            <MudText>Welcome to my student portal</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12">
                        <div class="d-flex justify-center" style="padding-top: 25px;">
                            <MudText>
                                Don't have an account?
                                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                                    Register here
                                </MudLink>
                            </MudText>
                        </div>
                    </MudItem>
                    <div style="padding-top: 25px;">
                        <label for="email" class="form-label">Email</label>
                        <InputText T="string" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div style="padding-top: 25px;">
                        <label for="password" class="form-label">Password</label>
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div style="padding-top: 25px;">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>
              

                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">Log in</MudButton>
                    </MudCardActions>
                    @* <MudLink href="Account/ForgotPassword">Forgot your password?</MudLink> *@

                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>



@code {

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            Snackbar.Add("User logged in.", Severity.Info);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            Snackbar.Add("User account locked out.", Severity.Warning);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Snackbar.Add("Error: Invalid login attempt.", Severity.Error);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
